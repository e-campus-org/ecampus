services:
  mongo:
    networks:
      - test-network
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: my_password
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongo-express:
    networks:
      - test-network
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: my_password
      ME_CONFIG_MONGODB_URL: mongodb://admin:my_password@mongo:27017/
   
  redis:
    networks:
      - test-network
    image: redis:latest
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass ${REDIS_PASSWORD}" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        redis-server /usr/local/etc/redis/redis.conf
      '
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - 6379:6379
    volumes:
      - ./redisdata:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery_worker:
    networks:
      - test-network
    build: .
    command: celery -A src.service worker --loglevel=INFO
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - TESTCONTAINERS_RYUK_DISABLED=true
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      redis:
        condition: service_healthy

  app:
    dns:
      - 8.8.8.8
      - 8.8.4.4
    build: .
    command: python main.py
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8000:8000
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - TESTCONTAINERS_RYUK_DISABLED=true
    privileged: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - test-network

  # postgres:
  #   image: postgres:13
  #   networks:
  #     - test-network
  #   ports:
  #     - "5432"
  #   environment:
  #     - POSTGRES_USER=test
  #     - POSTGRES_PASSWORD=test
  #     - POSTGRES_DB=test
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U test"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

networks:
  test-network:
    driver: bridge